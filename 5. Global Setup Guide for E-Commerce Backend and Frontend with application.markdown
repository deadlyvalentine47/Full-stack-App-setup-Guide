# Global Setup Guide for E-Commerce Backend and Frontend with application.properties

## Backend Setup (Java Spring Boot Microservices)

### Prerequisites
- **Java**: Install Java 17 (LTS), the foundation for Spring Boot, ensuring compatibility with modern features like records and sealed classes.
- **Build Tool**: Use Maven to manage dependencies, build, and package microservices consistently.
- **IDE**: Choose IntelliJ IDEA or Eclipse for code editing, debugging, and Spring Boot integrations.
- **Databases**:
  - **PostgreSQL 15**: A relational database for structured data like users, orders, and payments, offering robust transactions and SQL standards.
  - **MongoDB 6**: A NoSQL database for flexible, document-based storage, ideal for products with varying attributes.
  - **Redis 7**: A fast, in-memory key-value store for caching (e.g., product lists) and temporary data (e.g., carts).
- **Messaging**: Apache Kafka 3 for asynchronous, event-driven communication between services (e.g., order creation triggers payment processing).
- **Tools**: Docker for containerized environments; Git for version control.

### Backend Setup Steps
1. **Environment Setup**
   - Install Java 17 and verify: `java -version`. Ensures Spring Boot runs correctly.
   - Install Maven and check: `mvn -version`. Manages project builds and dependencies.
   - Set up databases and Kafka using Docker for consistency across environments:
     - **PostgreSQL**: Run `docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=your_password postgres:15` to host a relational DB at localhost:5432.
     - **MongoDB**: Run `docker run -d -p 27017:27017 --name mongodb mongo:6` for a NoSQL DB at localhost:27017.
     - **Redis**: Run `docker run -d -p 6379:6379 --name redis redis:7` for in-memory storage at localhost:6379.
     - **Kafka**: Use Docker Compose for Kafka and Zookeeper (dependency for cluster management):
       ```yaml
       version: '3'
       services:
         zookeeper:
           image: confluentinc/cp-zookeeper:latest
           environment:
             ZOOKEEPER_CLIENT_PORT: 2181
             ZOOKEEPER_TICK_TIME: 2000
           ports:
             - "2181:2181"
         kafka:
           image: confluentinc/cp-kafka:latest
           depends_on:
             - zookeeper
           ports:
             - "9092:9092"
           environment:
             KAFKA_BROKER_ID: 1
             KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
             KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
             KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       ```
       - Launch with `docker-compose up -d` to run Kafka at localhost:9092.

2. **Spring Boot Project Setup**
   - Use Spring Initializr (https://start.spring.io) to bootstrap microservices.
   - **Settings**: Select Java 17, Maven, groupId: `com.ecommerce`, artifactId: `microservices-parent`.
   - **Dependencies**: Add these for all services:
     - Spring Web: Builds RESTful APIs.
     - Spring Data JPA: Connects to PostgreSQL for ORM.
     - Spring Data MongoDB: Integrates with MongoDB for document storage.
     - Spring for Apache Kafka: Enables event publishing and consumption.
     - Spring Security: Secures APIs with authentication/authorization.
     - Spring Boot Starter OAuth2 Resource Server: Supports OAuth2 for secure token-based access.
     - Spring Boot Actuator: Provides health checks and metrics.
     - Spring Cloud Netflix Eureka Client: Registers services for discovery.
   - Generate and unzip the project, creating sub-modules for User, Product, Cart, Order, and Payment services.

3. **Configuration with application.properties**
   - Place `application.properties` in `src/main/resources` for each microservice to configure connections, ports, and more.
   - **Parent Project Dependencies** (in `pom.xml`):
     ```xml
     <dependencies>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-web</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jpa</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-mongodb</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.kafka</groupId>
         <artifactId>spring-kafka</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-security</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-actuator</artifactId>
       </dependency>
       <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
       </dependency>
     </dependencies>
     <dependencyManagement>
       <dependencies>
         <dependency>
           <groupId>org.springframework.cloud</groupId>
           <artifactId>spring-cloud-dependencies</artifactId>
           <version>2023.0.3</version>
           <type>pom</type>
           <scope>import</scope>
         </dependency>
       </dependencies>
     </dependencyManagement>
     ```
   - **Sample application.properties** (customize port per service: 8081 for User, 8082 for Product, etc.):
     ```
     # Server configuration
     server.port=8081
     
     # PostgreSQL configuration for User, Order, Payment services
     spring.datasource.url=jdbc:postgresql://localhost:5432/ecommerce
     spring.datasource.username=postgres
     spring.datasource.password=your_password
     spring.datasource.driver-class-name=org.postgresql.Driver
     spring.jpa.hibernate.ddl-auto=update
     spring.jpa.show-sql=true
     
     # MongoDB configuration for Product service
     spring.data.mongodb.uri=mongodb://localhost:27017/ecommerce
     spring.data.mongodb.database=ecommerce
     
     # Redis configuration for Cart service and caching
     spring.redis.host=localhost
     spring.redis.port=6379
     
     # Kafka configuration for event-driven communication
     spring.kafka.bootstrap-servers=localhost:9092
     spring.kafka.consumer.group-id=ecommerce-group
     spring.kafka.consumer.auto-offset-reset=earliest
     
     # Eureka service discovery
     spring.cloud.discovery.enabled=true
     eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
     eureka.client.register-with-eureka=true
     eureka.client.fetch-registry=true
     
     # Actuator for monitoring
     management.endpoints.web.exposure.include=health,metrics,info
     management.endpoint.health.show-details=always
     
     # Security (OAuth2) - Adjust based on Keycloak or custom auth server
     spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/ecommerce
     ```
   - **Explanation**:
     - `server.port`: Unique port for each microservice to avoid conflicts.
     - `spring.datasource.*`: Configures PostgreSQL connectionâ€”URL, credentials, and driver; `ddl-auto=update` auto-creates/updates tables.
     - `spring.data.mongodb.*`: Sets MongoDB connection and database name for flexible storage.
     - `spring.redis.*`: Connects to Redis for caching and fast cart operations.
     - `spring.kafka.*`: Links to Kafka broker; consumer settings for event processing.
     - `eureka.client.*`: Registers service with Eureka for discovery.
     - `management.endpoints.*`: Exposes Actuator endpoints for health and metrics.
     - `spring.security.oauth2.*`: Points to OAuth2 issuer (e.g., Keycloak) for token validation.

4. **Service Discovery**
   - **Purpose**: Eureka allows microservices to find and communicate with each other dynamically.
   - Create a new Spring Boot project, artifactId: `eureka-server`.
   - Add dependency: `spring-cloud-starter-netflix-eureka-server`.
   - Enable in main class with `@EnableEurekaServer`.
   - Configure in `application.properties`:
     ```
     server.port=8761
     eureka.client.register-with-eureka=false
     eureka.client.fetch-registry=false
     ```
   - **Explanation**: Runs on port 8761; disables self-registration since this is the discovery server.

5. **API Gateway**
   - **Purpose**: Central entry point for routing requests to microservices, handling CORS, and security.
   - Create a Spring Boot project, artifactId: `api-gateway`.
   - Add dependency: `spring-cloud-starter-gateway`.
   - Configure in `application.properties`:
     ```
     server.port=8080
     spring.cloud.gateway.routes[0].id=user-service
     spring.cloud.gateway.routes[0].uri=lb://user-service
     spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/**
     spring.cloud.gateway.routes[1].id=product-service
     spring.cloud.gateway.routes[1].uri=lb://product-service
     spring.cloud.gateway.routes[1].predicates[0]=Path=/api/products/**
     spring.cloud.gateway.routes[2].id=cart-service
     spring.cloud.gateway.routes[2].uri=lb://cart-service
     spring.cloud.gateway.routes[2].predicates[0]=Path=/api/cart/**
     spring.cloud.gateway.routes[3].id=order-service
     spring.cloud.gateway.routes[3].uri=lb://order-service
     spring.cloud.gateway.routes[3].predicates[0]=Path=/api/orders/**
     spring.cloud.gateway.routes[4].id=payment-service
     spring.cloud.gateway.routes[4].uri=lb://payment-service
     spring.cloud.gateway.routes[4].predicates[0]=Path=/api/payments/**
     eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
     ```
   - **Explanation**:
     - `server.port=8080`: Gateway runs here, frontend connects to this.
     - `spring.cloud.gateway.routes`: Routes requests (e.g., /api/users/**) to respective services via Eureka load balancing (`lb://`).
     - `eureka.client.*`: Connects to Eureka for service discovery.
   - Enable: `@EnableEurekaClient` in main class.

6. **Security**
   - **Purpose**: Protect APIs with Spring Security and OAuth2 for authentication/authorization.
   - Install Keycloak: `docker run -d -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:22.0`
   - In Keycloak (http://localhost:8080), create a realm `ecommerce`, add clients, users, and roles.
   - Configure each serviceâ€™s `application.properties` with OAuth2 settings (see above).
   - **Explanation**: Uses JWT tokens from Keycloak; `spring.security.oauth2.resourceserver.jwt.issuer-uri` validates tokens against the issuer.

7. **Testing & Monitoring**
   - Add JUnit: Include `spring-boot-starter-test` in `pom.xml` for unit and integration tests.
   - Actuator: Already configured in `application.properties` to expose `/actuator/health`, `/actuator/metrics`, etc., for monitoring service health and performance.

## Frontend Setup (Next.js)

### Prerequisites
- **Node.js**: Install Node.js 18 (LTS) and npm for JavaScript runtime and package management.
- **IDE**: Use VS Code for React/Next.js development and debugging.
- **Tools**: Git for version control; Vercel for easy deployment.

### Frontend Setup Steps
1. **Environment Setup**
   - Install Node.js and verify: `node -v` and `npm -v`.
   - Confirm Git: `git --version`.

2. **Project Setup**
   - Create a Next.js app: `npx create-next-app@latest ecommerce-frontend --ts`
   - Navigate: `cd ecommerce-frontend`
   - Install dependencies for API calls and styling:
     ```bash
     npm install axios tailwindcss postcss autoprefixer
     ```

3. **Configuration**
   - **Tailwind CSS**:
     - Initialize: `npx tailwindcss init -p`
     - Update `tailwind.config.js`:
       ```javascript
       /** @type {import('tailwindcss').Config} */
       module.exports = {
         content: [
           "./pages/**/*.{js,ts,jsx,tsx}",
           "./components/**/*.{js,ts,jsx,tsx}",
         ],
         theme: {
           extend: {},
         },
         plugins: [],
       }
       ```
     - Update `styles/globals.css`:
       ```css
       @tailwind base;
       @tailwind components;
       @tailwind utilities;
       ```
     - **Purpose**: Enables responsive, utility-first styling for the UI.
   - **API Calls**:
     - Create `lib/api.js`:
       ```javascript
       import axios from 'axios';
       
       const api = axios.create({
         baseURL: 'http://localhost:8080/api',
         headers: {
           'Content-Type': 'application/json',
         },
       });
       
       export default api;
       ```
     - **Explanation**: Axios simplifies HTTP requests to the API Gateway; baseURL points to the backend entry point.
   - **Environment Variables**:
     - Create `.env.local`:
       ```
       NEXT_PUBLIC_API_URL=http://localhost:8080/api
       ```
     - **Explanation**: Exposes the API Gateway URL to the frontend for API calls.

4. **Project Structure**
   - Organize:
     - `pages/`: Define routes (e.g., `index.tsx` for home, `products.tsx` for listings).
     - `components/`: Reusable UI pieces (e.g., ProductCard, CartItem).
     - `lib/`: Utilities like API client.
     - `styles/`: Global and Tailwind CSS.
   - **Purpose**: Keeps code modular and maintainable.

5. **Testing**
   - Install Jest and React Testing Library:
     ```bash
     npm install --save-dev jest @testing-library/react @testing-library/jest-dom
     ```
   - Update `package.json`:
     ```json
     "scripts": {
       "test": "jest"
     }
     ```
   - Create `jest.setup.js`:
     ```javascript
     import '@testing-library/jest-dom';
     ```
   - Configure `jest.config.js`:
     ```javascript
     module.exports = {
       setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
       testEnvironment: 'jsdom',
     };
     ```
   - **Explanation**: Jest tests components and API calls; `jsdom` simulates a browser environment.

6. **Run Development**
   - Start: `npm run dev`
   - Access: `http://localhost:3000`
   - **Purpose**: Runs the app locally for development and testing.

## Global Integration
- **Communication**: Frontend calls backend via REST through the API Gateway (e.g., `http://localhost:8080/api/users`).
- **CORS**: Configure API Gateway to allow `http://localhost:3000` as an origin for cross-origin requests.
- **Security**: Frontend retrieves OAuth2 tokens from Keycloak, sends them in `Authorization` headers for API calls.
- **Workflow**:
  - Start Eureka server (`port 8761`).
  - Launch microservices (e.g., User on 8081, Product on 8082).
  - Run API Gateway (port 8080).
  - Start Next.js app and test connectivity.

## Next Steps
- Develop User Service: Configure PostgreSQL, OAuth2, and APIs.
- Build frontend home page and connect to Product Service.
- Test with JUnit (backend) and Jest (frontend).
- Monitor with Actuator endpoints.